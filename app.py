# app.py ‚Äî multi-imports, d√©dup, garde le dernier, r√©sum√© p√©riodes

import streamlit as st
import pandas as pd
from utils import load_df, compute_creators_table

st.set_page_config(page_title="R√©compenses ‚Äì Cr√©ateurs", layout="wide")

st.title("üíé R√©compenses ‚Äì Cr√©ateurs")
st.caption("Calcul automatique des r√©compenses (activit√© + paliers + bonus d√©butant).")

# --- Session store ---
if "dfs" not in st.session_state:
    st.session_state.dfs = []      # liste de DataFrames normalis√©s (utils.load_df)
if "sources" not in st.session_state:
    st.session_state.sources = []  # noms de fichiers (juste informatif)

# --- Upload zone ---
with st.expander("Importez votre/vos fichier(s) (.xlsx / .csv)", expanded=True):
    files = st.file_uploader(
        "Drag and drop files here",
        type=["xlsx", "xls", "csv"],
        accept_multiple_files=True,
        label_visibility="visible"
    )

    col_a, col_b = st.columns([1,1])
    with col_a:
        if st.button("üì• Ajouter ces fichier(s) √† la session", use_container_width=True):
            if not files:
                st.warning("Aucun fichier s√©lectionn√©.")
            else:
                added = 0
                for f in files:
                    try:
                        df = load_df(f)  # utils.py -> normalise colonnes
                        st.session_state.dfs.append(df)
                        st.session_state.sources.append(getattr(f, "name", "fichier"))
                        added += 1
                    except Exception as e:
                        st.error(f"Erreur de lecture **{getattr(f,'name','(sans nom)')}** : {e}")
                if added:
                    st.success(f"{added} fichier(s) ajout√©(s) √† la session ‚úÖ")

    with col_b:
        if st.button("üßπ Vider les fichiers de la session", type="secondary", use_container_width=True):
            st.session_state.dfs = []
            st.session_state.sources = []
            st.experimental_rerun()

# --- Fusion + d√©dup ---
if not st.session_state.dfs:
    st.info("Importez un fichier pour d√©marrer.")
    st.stop()

# concat√®ne tous les fichiers de la session
all_df = pd.concat(st.session_state.dfs, ignore_index=True)

# cl√© de d√©dup : (P√©riode, Nom d‚Äôutilisateur). On garde **le dernier** import√©.
# (concat garde l‚Äôordre ‚Üí les derniers ajout√©s sont en bas ‚Üí keep='last')
dedup_df = (
    all_df
    .assign(_order=range(len(all_df)))  # au cas o√π
    .sort_values("_order")
    .drop_duplicates(subset=["P√©riode des donn√©es", "Nom d‚Äôutilisateur"], keep="last")
    .drop(columns=["_order"])
    .reset_index(drop=True)
)

# r√©sum√© p√©riodes charg√©es
with st.expander("üì¶ P√©riodes charg√©es en session", expanded=True):
    periods = (
        dedup_df["P√©riode des donn√©es"]
        .astype(str)
        .value_counts()
        .rename_axis("P√©riode")
        .reset_index(name="Cr√©ateurs (lignes)")
        .sort_values("P√©riode")
    )
    st.dataframe(periods, use_container_width=True, hide_index=True)
    st.caption(f"Fichiers en session : {', '.join(st.session_state.sources)}")

# --- Calcul & affichage ---
try:
    table = compute_creators_table(dedup_df)
except Exception as e:
    st.error(f"Erreur de traitement : {e}")
    st.stop()

st.success("Calcul termin√© ‚úÖ")
st.dataframe(table, use_container_width=True, hide_index=True)

# --- Exports ---
csv = table.to_csv(index=False).encode("utf-8-sig")
xlsx_name = "Recompense_Createurs.xlsx"

@st.cache_data(show_spinner=False)
def to_xlsx_bytes(df: pd.DataFrame) -> bytes:
    import io
    from pandas import ExcelWriter
    bio = io.BytesIO()
    with pd.ExcelWriter(bio, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False, sheet_name="Cr√©ateurs")
    return bio.getvalue()

col1, col2 = st.columns(2)
with col1:
    st.download_button("‚¨áÔ∏è Exporter en CSV", data=csv, file_name="Recompense_Createurs.csv", mime="text/csv", use_container_width=True)
with col2:
    st.download_button("‚¨áÔ∏è Exporter en Excel", data=to_xlsx_bytes(table), file_name=xlsx_name, mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", use_container_width=True)
